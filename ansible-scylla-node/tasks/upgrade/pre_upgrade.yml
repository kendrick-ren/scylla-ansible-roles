---

# Check cluster schema
- name: Get cluster schema
  ansible.builtin.uri:
    url: "http://{{ scylla_api_address }}:{{ scylla_api_port }}/storage_proxy/schema_versions"
    method: GET
  register: cluster_schemas
  until: cluster_schemas.status == 200 and cluster_schemas.json |length == 1
  retries: "{{ upgrade_api_default_retries |int }}"
  delay: "{{ upgrade_api_default_delay |int }}"

- name: Check if all cluster nodes use different schemas
  ansible.builtin.fail:
    msg: "Cluster schema is out of synchronization. Please check each node of the cluster."
  when: cluster_schemas.json |length > 1

# Drain the node 
- name: Drain the node
  ansible.builtin.uri:
    url: "http://{{ scylla_api_address }}:{{ scylla_api_port }}/storage_service/drain"
    method: POST
  register: node_drain_enable
  until: node_drain_enable.status == 200
  retries: "{{ upgrade_api_default_retries |int }}"
  delay: "{{ upgrade_api_default_delay |int }}"

- name: Ensure the node is fully drained
  block:
    - name: Ensure the node is fully drained
      ansible.builtin.uri:
        url: "http://{{ scylla_api_address }}:{{ scylla_api_port }}/storage_service/drain"
        method: GET
      register: node_drain_status
      until: node_drain_status.json.find("Drained") != -1
      retries: "{{ upgrade_api_default_retries |int * 3 }}"
      delay: "{{ upgrade_api_default_delay |int }}"
  rescue:
    # Kill Scylla process
    - name: Kill Scylla process
      ansible.builtin.shell: killall --exact --signal SIGKILL scylla
      register: scylla_process_kill
      become: true
    
    # Enable snapshot generation
    - name: Enable snapshot generation
      ansible.builtin.debug:
        msg: "Snapshot generation was set to be disabled but node draining failed. Enabling snapshot generation."
      when: not upgrade_generate_snapshots


# Prepare and create snapshot
- name: Prepare and create snapshot
  block:
     - name: Create snapshot
       ansible.builtin.uri:
         url: "http://{{ scylla_api_address }}:{{ scylla_api_port }}/storage_service/snapshots?tag={{ scylla_upgrade['id'] }}"
         method: POST
       register: node_snapshot_create
       until: node_snapshot_create.status == 200
       retries: "{{ upgrade_api_default_retries |int }}"
       delay: "{{ upgrade_api_default_delay |int }}"
     
     - name: Print snapshot identifier used
       ansible.builtin.debug:
         msg: "Snapshot identifier: {{ scylla_upgrade['id'] }}"
  when: upgrade_generate_snapshots or scylla_process_kill is defined


# Stop Scylla service
- name: Stop Scylla service
  ansible.builtin.service:
    name: scylla-server
    state: stopped
  become: true


# Determine the folder name for 'sysconfig/default' files
- name: Determine the folder name for distribution-specific files
  vars:
    is_etc_defaults: "{{ true if ansible_facts['distribution'] |lower == 'debian' or ansible_facts['distribution'] |lower == 'ubuntu' else false }}"
  ansible.builtin.set_fact:
    system_config_folder: "{{ 'default' if is_etc_defaults else 'sysconfig' }}"


# Prepare and create backup
- name: Create backup folders structure
  ansible.builtin.file:
    path : "{{ item }}"
    state: directory
    mode: '0755'
  become: true
  loop:
    - "{{ upgrade_backup_path }}/{{ scylla_upgrade['id'] }}"
    - "{{ upgrade_backup_path }}/{{ scylla_upgrade['id'] }}/etc"
    - "{{ upgrade_backup_path }}/{{ scylla_upgrade['id'] }}/etc/scylla.d"
    - "{{ upgrade_backup_path }}/{{ scylla_upgrade['id'] }}/etc/{{ system_config_folder }}"

- name: Dump Scylla version
  ansible.builtin.copy:
    content: "{{ scylla_detected['version'] }}"
    dest: "{{ upgrade_backup_path }}/{{ scylla_upgrade['id'] }}/scylla_version.txt"
  become: true

- name: Backup Scylla configuration file
  ansible.builtin.copy:
    src: /etc/scylla/scylla.yaml
    dest: "{{ upgrade_backup_path }}/{{ scylla_upgrade['id'] }}/etc/scylla.yaml"
    mode: preserve
    remote_src: yes
  become: true

- name: Backup Scylla extra configuration files
  ansible.builtin.copy:
    src: /etc/scylla.d/
    dest: "{{ upgrade_backup_path }}/{{ scylla_upgrade['id'] }}/etc/scylla.d/"
    directory_mode: yes
    mode: preserve
    remote_src: yes
  become: true

- name: Find Scylla system-wide configuration files
  ansible.builtin.find:
    paths: "/etc/{{ system_config_folder }}"
    patterns: "scylla*"
    file_type: file
  register: scylla_config_files
  become: true

- name: Backup Scylla system-wide configuration files
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ upgrade_backup_path }}/{{ scylla_upgrade['id'] }}/etc/{{ system_config_folder }}/{{ item.path | basename }}"
    mode: preserve
    remote_src: yes
  become: true
  loop: "{{ scylla_config_files.files }}"
